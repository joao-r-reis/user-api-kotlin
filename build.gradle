buildscript {
    ext.kotlin_version = '1.2.31'
    ext.ktor_version = '0.9.1'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'io.github.joao-r-reis.user-api-kotlin'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'application' 

mainClassName = 'io.github.joaorreis.userapikotlin.presentation.api.StartupKt'

defaultTasks 'run'

kotlin {
    experimental {
        coroutines "enable"
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.23.1"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "org.litote.kmongo:kmongo-coroutine-native:3.6.3"
    compile "ch.qos.logback:logback-classic:1.2.1"
    compile "org.koin:koin-ktor:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"

    testCompile "io.ktor:ktor-server-test-host:$ktor_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.1"
    testCompile "org.mockito:mockito-core:2.18.3"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "${System.getProperty("line.separator")}Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
            }
        }
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}